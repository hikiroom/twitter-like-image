/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["TwitterLikeImage"] = factory();
	else
		root["TwitterLikeImage"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/style.ts":
/*!*************************!*\
  !*** ./src/ts/style.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.style = void 0;\nexports.style = {\n    '.twitter-like-image': {\n        width: '100%',\n        borderRadius: '20px',\n        position: 'relative',\n        overflow: 'hidden',\n    },\n    '.twitter-like-image::before': {\n        content: \"''\",\n        display: 'block',\n        width: '100%',\n        paddingTop: '50%',\n    },\n    '.content': {\n        display: 'grid',\n        gridTemplateColumns: '1fr 1fr',\n        gridTemplateRows: '1fr 1fr',\n        position: 'absolute',\n        width: '100%',\n        height: '100%',\n        left: '0',\n        top: '0',\n        gridGap: '4px',\n        listStyle: 'none',\n        margin: '0',\n        padding: '0',\n    },\n    '.item': {\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n    },\n    '.item:nth-last-child(1)': {\n        gridColumn: '1/3',\n        gridRow: '1/3',\n    },\n    '.item:nth-last-child(2)': {\n        gridColumn: '1',\n        gridRow: '1/3',\n    },\n    '.item:nth-last-child(2) + .item': {\n        gridColumn: '2',\n        gridRow: '1/3',\n    },\n    '.item:nth-last-child(3)': {\n        gridColumn: '1',\n        gridRow: '1',\n    },\n    '.item:nth-last-child(3) + .item': {\n        gridColumn: '1',\n        gridRow: '2',\n    },\n    '.item:nth-last-child(3) + .item + .item': {\n        gridColumn: '2',\n        gridRow: '1/3',\n    },\n    '.item:nth-last-child(4)': {\n        gridColumn: '1/2',\n        gridRow: '1/2',\n    },\n    '.item:nth-last-child(4) + .item': {\n        gridColumn: '2/3',\n        gridRow: '1/2',\n    },\n    '.item:nth-last-child(4) + .item + .item': {\n        gridColumn: '1/2',\n        gridRow: '2/3',\n    },\n    '.item:nth-last-child(4) + .item + .item + .item': {\n        gridColumn: '2/3',\n        gridRow: '2/3',\n    },\n    '.item button': {\n        display: 'block',\n        border: '0',\n        padding: '0',\n        background: 'transparent',\n        width: '100%',\n        height: '100%',\n    },\n    '.item img': {\n        width: '100%',\n        height: '100%',\n        display: 'block',\n        objectFit: 'cover',\n    },\n    '.backdrop': {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n        background: 'rgba(0, 0, 0, 0.7)',\n        transition: 'opacity 0.2s, visibility 0.2s',\n        position: 'fixed',\n        top: '0',\n        left: '0',\n        zIndex: 100,\n    },\n    '.backdrop.is-hide': {\n        opacity: '0',\n        visibility: 'hidden',\n    },\n    '.backdrop-content': {\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n        listStyle: 'none',\n        margin: '0',\n        padding: '0',\n    },\n    '.backdrop-content.is-animation': {\n        transition: '0.4s cubic-bezier(0.33, 0.98, 0.77, 0.98)',\n    },\n    '.backdrop-item': {\n        display: 'flex',\n        height: '100%',\n        minWidth: '100%',\n        alignItems: 'center',\n        justifyContent: 'center',\n        overflow: 'hidden',\n    },\n    '.backdrop-item img': {\n        width: '100%',\n        height: '100%',\n        objectFit: 'contain',\n    },\n    '.backdrop-caption': {\n        minHeight: '80px',\n        width: '100%',\n        background: 'rgba(0, 0, 0, 0.5)',\n        position: 'absolute',\n        bottom: '0',\n        left: '0',\n        padding: '10px 15px',\n        color: 'white',\n        boxSizing: 'border-box',\n        margin: '0',\n    },\n    '.backdrop-next,.backdrop-prev': {\n        display: 'flex',\n        alignItems: 'center',\n        height: '100%',\n        paddingLeft: '10px',\n        paddingRight: '10px',\n        position: 'absolute',\n        top: '0',\n        border: '0',\n        background: 'transparent',\n        overflow: 'hidden',\n    },\n    '.backdrop-next.is-hide,.backdrop-prev.is-hide': {\n        display: 'none',\n    },\n    '.backdrop-next:focus,.backdrop-prev:focus': {\n        outline: 'none',\n    },\n    '.backdrop-next:focus::before,.backdrop-prev:focus::before': {\n        border: '2px solid rgba(255, 255, 255, 0.4)',\n    },\n    '.backdrop-next:hover::before,.backdrop-prev:hover::before': {\n        background: 'rgba(255, 255, 255, 0.1)',\n    },\n    '.backdrop-next::before,.backdrop-prev::before': {\n        content: \"''\",\n        display: 'block',\n        width: '38px',\n        height: '38px',\n        borderRadius: '50%',\n        background: 'rgba(0, 0, 0, 0.1)',\n        transition: '0.3s',\n        border: '2px solid transparent',\n    },\n    '.backdrop-next::after,.backdrop-prev::after': {\n        content: \"''\",\n        display: 'block',\n        width: '8px',\n        height: '8px',\n        position: 'absolute',\n        top: 'calc(50% - 5px)',\n    },\n    '.backdrop-prev': {\n        left: '0',\n    },\n    '.backdrop-prev::after': {\n        borderLeft: '2px solid rgba(255, 255, 255, 0.6)',\n        borderTop: '2px solid rgba(255, 255, 255, 0.6)',\n        transform: 'rotate(-45deg)',\n        right: 'calc(50% - 6px)',\n    },\n    '.backdrop-next': {\n        right: '0',\n    },\n    '.backdrop-next::after': {\n        borderTop: '2px solid rgba(255, 255, 255, 0.6)',\n        borderRight: '2px solid rgba(255, 255, 255, 0.6)',\n        transform: 'rotate(45deg)',\n        left: 'calc(50% - 6px)',\n    },\n    '.backdrop-close': {\n        display: 'block',\n        width: '38px',\n        height: '38px',\n        borderRadius: '50%',\n        background: 'rgba(0, 0, 0, 0.1)',\n        position: 'absolute',\n        overflow: 'hidden',\n        top: '20px',\n        left: '10px',\n        transition: '0.3s',\n        border: '2px solid transparent',\n    },\n    '.backdrop-close:hover': {\n        background: 'rgba(255, 255, 255, 0.1)',\n    },\n    '.backdrop-close:focus': {\n        outline: 'none',\n        border: '2px solid rgba(255, 255, 255, 0.4)',\n    },\n    '.backdrop-close::before,.backdrop-close::after': {\n        content: \"''\",\n        display: 'block',\n        width: '16px',\n        height: '2px',\n        background: 'rgba(255, 255, 255, 0.6)',\n        position: 'absolute',\n        top: 'calc(50% - 1px)',\n        left: 'calc(50% - 8px)',\n    },\n    '.backdrop-close::before': {\n        transform: 'rotate(45deg)',\n    },\n    '.backdrop-close::after': {\n        transform: 'rotate(-45deg)',\n    },\n};\n\n\n//# sourceURL=webpack://TwitterLikeImage/./src/ts/style.ts?");

/***/ }),

/***/ "./src/ts/twitterLikeImage.ts":
/*!************************************!*\
  !*** ./src/ts/twitterLikeImage.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst style_1 = __webpack_require__(/*! ./style */ \"./src/ts/style.ts\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./src/ts/utils.ts\");\nclass TwitterLikeImage extends HTMLElement {\n    constructor() {\n        super();\n        this.init = false;\n        this.content = null;\n        this.backdrop = null;\n        this.backdropContent = null;\n        this.backdropCaption = null;\n        this.backdropPrev = null;\n        this.backdropNext = null;\n        this.backdropClose = null;\n        this.item = null;\n        this.backdropContentItem = null;\n        this.srcArr = [];\n        this.altArr = [];\n        this.activeItemIdx = -1;\n        this.lookAt = null;\n        this.attachShadow({ mode: 'open' });\n        this.appendTemplateToShadowDom();\n    }\n    connectedCallback() {\n        if (!this.init) {\n            this.init = true;\n            this.setElementsToThis();\n            this.appendItemElements();\n            this.setEventListener();\n            this.closeBackdrop();\n        }\n    }\n    /**\n     * shadowDOMに要素のテンプレートを追加する\n     */\n    appendTemplateToShadowDom() {\n        var _a;\n        const template = document.createElement('template');\n        template.innerHTML = `\n            <div class=\"twitter-like-image\">\n            <ul class=\"content\"></ul>\n            <div class=\"backdrop\" tabindex=\"-1\">\n            <ul class=\"backdrop-content\"></ul>\n            <p class=\"backdrop-caption\"></p>\n            <button class=\"backdrop-prev\" aria-label=\"previous\"></button>\n            <button class=\"backdrop-next\" aria-label=\"next\"></button>\n            <button class=\"backdrop-close\" aria-label=\"close\"></button>\n            </div>\n            </div>\n        `;\n        const instance = template.content.cloneNode(true);\n        const styleElement = utils_1.styleStringToStyleElement(utils_1.styleObjectToStyleString(style_1.style));\n        (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.append(instance, styleElement);\n    }\n    /**\n     * 各種要素をthisに格納する\n     */\n    setElementsToThis() {\n        const { shadowRoot } = this;\n        if (!shadowRoot) {\n            throw new Error('shadowRoot is not found.');\n        }\n        const srcArr = utils_1.getAttrStrArr(shadowRoot.host, 'src');\n        const altArr = utils_1.getAttrStrArr(shadowRoot.host, 'alt');\n        const content = shadowRoot.querySelector('.content');\n        const backdrop = shadowRoot.querySelector('.backdrop');\n        const backdropContent = shadowRoot.querySelector('.backdrop-content');\n        const backdropCaption = shadowRoot.querySelector('.backdrop-caption');\n        const backdropPrev = shadowRoot.querySelector('.backdrop-prev');\n        const backdropNext = shadowRoot.querySelector('.backdrop-next');\n        const backdropClose = shadowRoot.querySelector('.backdrop-close');\n        if (!backdrop || !content || !backdropContent || !backdropCaption || !backdropPrev || !backdropNext || !backdropClose) {\n            throw new Error('structure elements are wrong.');\n        }\n        this.altArr = altArr;\n        this.srcArr = srcArr;\n        this.content = content;\n        this.backdrop = backdrop;\n        this.backdropContent = backdropContent;\n        this.backdropCaption = backdropCaption;\n        this.backdropPrev = backdropPrev;\n        this.backdropNext = backdropNext;\n        this.backdropClose = backdropClose;\n        this.item = srcArr.map((src, i) => {\n            var _a;\n            const contentImg = utils_1.createElement('img', { src, alt: (_a = altArr[i]) !== null && _a !== void 0 ? _a : '' });\n            const button = utils_1.createElement('button', { type: 'button', 'aria-label': `画像を拡大表示する` }, [contentImg]);\n            const item = utils_1.createElement('li', { class: 'item' }, [button]);\n            return item;\n        });\n        this.backdropContentItem = srcArr.map((src, i) => {\n            var _a;\n            const backdropImg = utils_1.createElement('img', { src, alt: (_a = altArr[i]) !== null && _a !== void 0 ? _a : '' });\n            const backdropContentItem = utils_1.createElement('li', { class: 'backdrop-item' }, [backdropImg]);\n            return backdropContentItem;\n        });\n        this.lookAt = new utils_1.LookAt(backdrop);\n    }\n    /**\n     * item要素をcontent（backdrop含む）要素に追加する\n     */\n    appendItemElements() {\n        const { content, backdropContent, item, backdropContentItem } = this;\n        if (!content || !backdropContent || !item || !backdropContentItem) {\n            throw new Error('Either content or backdrop-content does not exist.');\n        }\n        content.append(...item);\n        backdropContent.append(...backdropContentItem);\n    }\n    /**\n     * 各種要素にイベントを設定する\n     */\n    setEventListener() {\n        const { backdrop, backdropPrev, backdropNext, backdropClose, item } = this;\n        if (!backdrop || !backdropPrev || !backdropNext || !backdropClose || !item) {\n            throw new Error('Either backdrop or backdropPrev or backdropNext or backdropClose or item are wrong.');\n        }\n        item.forEach((_item, i) => {\n            const button = _item.querySelector('button');\n            if (!button) {\n                throw new Error('button is wrong.');\n            }\n            button.addEventListener('click', this.openBackdrop.bind(this, i));\n        });\n        backdrop.addEventListener('transitionend', this.readyBackdropContent.bind(this));\n        backdrop.addEventListener('click', this.closeBackdropIfMe.bind(this));\n        backdropPrev.addEventListener('click', this.switchTargetImageToPrevious.bind(this));\n        backdropNext.addEventListener('click', this.switchTargetImageToNext.bind(this));\n        backdropClose.addEventListener('click', this.closeBackdrop.bind(this));\n    }\n    /**\n     * backdropContentのアニメーション準備ができたら実行される処理\n     * @param e\n     */\n    readyBackdropContent(e) {\n        const { backdropContent } = this;\n        if (!backdropContent) {\n            throw new Error('Either content or backdrop-content are wrong.');\n        }\n        if (e.target === e.currentTarget && e.propertyName === 'opacity') {\n            if (backdropContent.classList.contains('is-animation')) {\n                backdropContent.classList.remove('is-animation');\n            }\n            else {\n                backdropContent.classList.add('is-animation');\n                this.focusBackdropBtnAssociatedWithActiveItemIdx();\n            }\n        }\n    }\n    /**\n     * itemIdxに対応したitemButtonにフォーカスする\n     * @param itemIdx\n     */\n    focusItemButton(itemIdx) {\n        var _a, _b;\n        const { item } = this;\n        if (!item) {\n            throw new Error('item is wrong.');\n        }\n        (_b = (_a = item[itemIdx]) === null || _a === void 0 ? void 0 : _a.querySelector('button')) === null || _b === void 0 ? void 0 : _b.focus();\n    }\n    /**\n     * activeItemIdxに関連したbackdropBtnにフォーカスする\n     */\n    focusBackdropBtnAssociatedWithActiveItemIdx() {\n        const { backdropPrev, backdropNext } = this;\n        if (!backdropPrev || !backdropNext) {\n            throw new Error('Either backdropPrev or backdropNext are wrong.');\n        }\n        if (this.activeItemIdx === this.srcArr.length - 1) {\n            backdropPrev.focus();\n        }\n        else {\n            backdropNext.focus();\n        }\n    }\n    /**\n     * backdropを開く\n     * @param itemIdx\n     */\n    openBackdrop(itemIdx) {\n        const { backdrop } = this;\n        if (!backdrop) {\n            throw new Error('backdrop is wrong.');\n        }\n        utils_1.windowLock();\n        this.switchTargetImageTo(itemIdx);\n        backdrop.classList.remove('is-hide');\n    }\n    /**\n     * backdropを閉じる\n     * @param e\n     */\n    closeBackdrop() {\n        const { backdrop } = this;\n        if (!backdrop) {\n            throw new Error('backdrop is wrong.');\n        }\n        utils_1.windowUnLock();\n        this.focusItemButton(this.activeItemIdx);\n        this.switchTargetImageTo(-1);\n        backdrop.classList.add('is-hide');\n    }\n    /**\n     * MouseEventの発生源がcurrentTargetの場合、backdropを閉じる\n     * @param e\n     */\n    closeBackdropIfMe(e) {\n        if (e.target === e.currentTarget) {\n            this.closeBackdrop();\n        }\n    }\n    /**\n     * itemIdxに対応したitemをtargetとして各種処理を与える\n     * @param itemIdx\n     */\n    switchTargetImageTo(itemIdx) {\n        var _a;\n        this.activeItemIdx = itemIdx;\n        this.translateTo(itemIdx);\n        this.changeStateOfBackdropPrevBtn(itemIdx === 0, this.focusBackdropBtnAssociatedWithActiveItemIdx.bind(this));\n        this.changeStateOfBackdropNextBtn(itemIdx === this.srcArr.length - 1, this.focusBackdropBtnAssociatedWithActiveItemIdx.bind(this));\n        this.setCaption((_a = this.altArr[itemIdx]) !== null && _a !== void 0 ? _a : '');\n    }\n    /**\n     * activeItemIdx-1に対応したitemをtargetとして各種処理を与える\n     */\n    switchTargetImageToPrevious() {\n        this.switchTargetImageTo(this.activeItemIdx - 1);\n    }\n    /**\n     * activeItemIdx+1に対応したitemをtargetとして各種処理を与える\n     */\n    switchTargetImageToNext() {\n        this.switchTargetImageTo(this.activeItemIdx + 1);\n    }\n    /**\n     * backdropPrevBtnの表示状態を変更する\n     * @param boolean\n     * @param trueCallback\n     */\n    changeStateOfBackdropPrevBtn(boolean, trueCallback) {\n        var _a, _b, _c;\n        if (boolean) {\n            (_a = this.backdropPrev) === null || _a === void 0 ? void 0 : _a.classList.add('is-hide');\n            if (trueCallback) {\n                trueCallback();\n            }\n        }\n        else if (!boolean && ((_b = this.backdropPrev) === null || _b === void 0 ? void 0 : _b.classList.contains('is-hide'))) {\n            (_c = this.backdropPrev) === null || _c === void 0 ? void 0 : _c.classList.remove('is-hide');\n        }\n    }\n    /**\n     * backdropNextBtnの表示状態を変更する\n     * @param boolean\n     * @param trueCallback\n     */\n    changeStateOfBackdropNextBtn(boolean, trueCallback) {\n        var _a, _b, _c;\n        if (boolean) {\n            (_a = this.backdropNext) === null || _a === void 0 ? void 0 : _a.classList.add('is-hide');\n            if (trueCallback) {\n                trueCallback();\n            }\n        }\n        else if (!boolean && ((_b = this.backdropNext) === null || _b === void 0 ? void 0 : _b.classList.contains('is-hide'))) {\n            (_c = this.backdropNext) === null || _c === void 0 ? void 0 : _c.classList.remove('is-hide');\n        }\n    }\n    /**\n     * itemIdxに対応したitemを画面上に表示させる\n     * @param itemIdx\n     */\n    translateTo(itemIdx) {\n        const { backdropContent } = this;\n        if (!backdropContent) {\n            throw new Error('backdropContent is wrong.');\n        }\n        backdropContent.style.transform = `translateX(-${itemIdx * 100}%)`;\n    }\n    /**\n     * キャプションを設定する\n     * @param caption\n     */\n    setCaption(caption) {\n        const { backdropCaption } = this;\n        if (!backdropCaption) {\n            throw new Error('backdropCaption is wrong.');\n        }\n        backdropCaption.innerText = caption;\n    }\n}\ncustomElements.define('tl-img', TwitterLikeImage);\n\n\n//# sourceURL=webpack://TwitterLikeImage/./src/ts/twitterLikeImage.ts?");

/***/ }),

/***/ "./src/ts/utils.ts":
/*!*************************!*\
  !*** ./src/ts/utils.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LookAt = exports.FOCUSABLE_ELEMENTS = exports.windowUnLock = exports.windowLock = exports.getAttrStrArr = exports.createElement = exports.lowerCamelCaseToKebabCase = exports.styleStringToStyleElement = exports.styleObjectToStyleString = void 0;\n/**\n * styleObjectを元に、styleStringを生成する\n * @param styleObject\n */\nconst styleObjectToStyleString = (styleObject) => {\n    let styleString = '';\n    for (const [selector, valueObject] of Object.entries(styleObject)) {\n        styleString += `${selector} {`;\n        for (const [property, value] of Object.entries(valueObject)) {\n            styleString += `${exports.lowerCamelCaseToKebabCase(property)}: ${value};`;\n        }\n        styleString += `}`;\n    }\n    return styleString;\n};\nexports.styleObjectToStyleString = styleObjectToStyleString;\n/**\n * styleStringを元に、styleElementを生成する\n * @param styleString\n */\nconst styleStringToStyleElement = (styleString) => {\n    const styleElement = document.createElement('style');\n    styleElement.insertAdjacentText('beforeend', styleString);\n    return styleElement;\n};\nexports.styleStringToStyleElement = styleStringToStyleElement;\n/**\n * 文字列をローワーキャメルケースからケバブケースに変換する\n * @param string 変換したい文字列\n */\nconst lowerCamelCaseToKebabCase = (string) => {\n    return string.replace(/(?!=[A-Z]|^.)([A-Z])/g, (targetString) => {\n        return `-${targetString.charAt(0).toLowerCase()}`;\n    });\n};\nexports.lowerCamelCaseToKebabCase = lowerCamelCaseToKebabCase;\n/**\n * 任意のHTMLElementを生成する\n * @param tagName\n * @param attrObject\n * @param [children[]]\n * @returns\n */\nconst createElement = (tagName, attrObject, children) => {\n    const el = document.createElement(tagName);\n    for (const [key, value] of Object.entries(attrObject)) {\n        el.setAttribute(key, value);\n    }\n    if (children && children.length > 0) {\n        children.forEach((element) => {\n            el.append(element);\n        });\n    }\n    return el;\n};\nexports.createElement = createElement;\n/**\n * 文字列で表された配列を通常の配列として返す\n * @param attrName\n */\nconst getAttrStrArr = (element, attrName) => {\n    var _a;\n    const attrArr = (_a = element.getAttribute(attrName)) === null || _a === void 0 ? void 0 : _a.replace(/\\s/g, '').split(',');\n    if (!attrArr || attrArr.length < 1 || attrArr.length > 4) {\n        throw new Error(`Something is wrong of ${attrName} attribute.`);\n    }\n    return attrArr;\n};\nexports.getAttrStrArr = getAttrStrArr;\n/**\n * body要素を現在のスクロール値で固定する\n */\nconst windowLock = () => {\n    const doc = document.body;\n    const scrollHeight = window.pageYOffset;\n    doc.style.width = '100%';\n    doc.style.position = 'fixed';\n    doc.style.top = `-${scrollHeight}px`;\n};\nexports.windowLock = windowLock;\n/**\n * body要素の固定を解く\n */\nconst windowUnLock = () => {\n    const doc = document.body;\n    const top = doc.style.top ? Math.abs(parseInt(doc.style.top, 10)) : 0;\n    doc.style.width = '';\n    doc.style.position = '';\n    doc.style.top = '';\n    window.scrollTo(0, top);\n};\nexports.windowUnLock = windowUnLock;\n/**\n * フォーカス可能な要素のセレクタ文字列\n */\nexports.FOCUSABLE_ELEMENTS = 'button:not(.is-hide), [href], input:not([disabled]), select, textarea, [tabindex]:not([tabindex=\"-1\"])';\n/**\n * フォーカス管理クラス\n */\nclass LookAt {\n    constructor(wrapperElement) {\n        this.loopEvent = this.focusLoop.bind(this);\n        this.wrapperElement = wrapperElement;\n        this.mutationObserver = new MutationObserver(this.reset.bind(this));\n        this.focusableElements = this.wrapperElement.querySelectorAll(exports.FOCUSABLE_ELEMENTS);\n        this.firstElement = this.focusableElements[0];\n        this.lastElement = this.focusableElements[this.focusableElements.length - 1];\n        this.focusableElements.forEach((item) => {\n            this.mutationObserver.observe(item, {\n                attributes: true,\n            });\n        });\n    }\n    /**\n     * 各種要素とイベントを設定しなおす\n     */\n    reset() {\n        this.resetEvents();\n        this.resetFocusableElements();\n    }\n    /**\n     * 各種要素を設定しなおす\n     */\n    resetFocusableElements() {\n        this.focusableElements = this.wrapperElement.querySelectorAll(exports.FOCUSABLE_ELEMENTS);\n        this.firstElement = this.focusableElements[0];\n        this.lastElement = this.focusableElements[this.focusableElements.length - 1];\n    }\n    /**\n     * イベントを設定しなおす\n     */\n    resetEvents() {\n        this.removeEvents();\n        this.addEvents();\n    }\n    /**\n     * 対象要素にイベントハンドラを追加する\n     */\n    addEvents() {\n        this.firstElement.addEventListener('keydown', this.loopEvent);\n        this.lastElement.addEventListener('keydown', this.loopEvent);\n    }\n    /**\n     * 対象要素のイベントハンドラを削除する\n     */\n    removeEvents() {\n        this.firstElement.removeEventListener('keydown', this.loopEvent);\n        this.lastElement.removeEventListener('keydown', this.loopEvent);\n    }\n    /**\n     * 対象要素間でフォーカスをループさせる\n     */\n    focusLoop(e) {\n        const key = e.key;\n        const onTab = key === 'Tab';\n        const onShift = e.shiftKey;\n        const target = e.target;\n        const isFirstElement = target === this.firstElement;\n        const isLastElement = target === this.lastElement;\n        if (onTab && onShift && isFirstElement) {\n            e.preventDefault();\n            this.lastElement.focus();\n        }\n        else if (onTab && !onShift && isLastElement) {\n            e.preventDefault();\n            this.firstElement.focus();\n        }\n    }\n}\nexports.LookAt = LookAt;\n\n\n//# sourceURL=webpack://TwitterLikeImage/./src/ts/utils.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/ts/twitterLikeImage.ts");
/******/ 	__webpack_exports__ = __webpack_exports__.default;
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});